esphome:
  name: blower-fan # Desired name within ESPHome
  friendly_name: blower-fan
  on_boot:
   priority: -100.0
   then:
     - lambda: "id(oled_contrast).publish_state(0.4);"

substitutions:
  name: "Blower Fan" # Name used for sensor names once added to Home Assistant
  room: "Bedroom" # Room used for sensor names once added to Home Assistant

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Home Assistant API
api:
  encryption: # Remove if you are not using encryption or update the entry with the new encryption key
    key: "" 

ota:
  password: "" # Remove if you are not using ota passwords or update the entry with the new password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$name Fallback Hotspot"
    password: "zE1DUbIEyfqV"

captive_portal:

# Status light to visually display if issues # Update GPIO number with the relevant pin for your board
light:
  - platform: status_led
    name: "$name Status LED"
    id: statusled
    pin:
      number: GPIO25
      inverted: true
    internal: true

# Animations used on the OLED
animation:
  - file: "_icons/thermostat/fan.gif"
    id: ani_fan
  - file: "_icons/thermostat/fire.gif"
    id: ani_fire

# Images used on the OLED
image:
  - file: "_icons/thermostat/home-thermometer.png"
    id: home_thermometer
  - file: "_icons/thermostat/arrow-left-circle-outline.png"
    id: arrow_left
  - file: "_icons/thermostat/arrow-right-circle-outline.png"
    id: arrow_right
  - file: "_icons/thermostat/lightbulb-on-outline.png"
    id: bulb

# Fonts used on the OLED
font:
  - file: "_fonts/nasalization.ttf"
    id: font1
    size: 12
  - file: "_fonts/refsan.ttf"
    id: font2
    size: 42
  - file: "_fonts/refsan.ttf"
    id: font3
    size: 13
  - file: "_fonts/refsan.ttf"
    id: font4
    size: 10

# Comms bus for OLED # Update GPIO number with the relevant pin for your board
i2c:
  sda: GPIO02
  scl: GPIO04

# OLED set up # Update address with the relevant address for your board
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    update_interval: 1.0s
    contrast: 0.4
    address: 0x3C
    id: oled1
    lambda: |-
      if (id(fire).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}
      else if (id(cool).state) {id(ani_fan).next_frame(); it.image(0, 0, id(ani_fan));}
      else {it.image(0, 0, id(home_thermometer));}

      it.print(64, 0, id(font1), TextAlign::TOP_CENTER, "FAN");
      it.printf(128, 0, id(font4), TextAlign::TOP_RIGHT, " %.1f%% ", id(room_humidity).state);

      it.printf(64, 4, id(font2), TextAlign::TOP_CENTER, " %.1f째", id(room_temperature).state);
      it.printf(0, 64, id(font3), TextAlign::BASELINE_LEFT, "TT:%.1f째", id(this_thermostat).target_temperature_low);
      it.printf(128, 64, id(font3), TextAlign::BASELINE_RIGHT, "IT:%.1f째", id(intake_temperature).state);

      if (id(brightness).state) {it.image(56, 51, id(bulb));}
      else if (id(heat_cool).state) {it.image(56, 51, id(arrow_left));}
      else it.printf(56, 51, id(font3), "");

# Sensors set up # Update GPIO number with the relevant pin for your board
sensor:
  - platform: dht
    pin: GPIO23
    temperature:
      id: intake_temperature
      name: "$name Intake Temperature"
    humidity:
      id: intake_humidity
      name: "$name Intake Humidity"
    update_interval: 10s
    model: DHT22
  - platform: dht
    pin: GPIO27
    temperature:
      id: room_temperature
      name: "$name Room Temperature"
    humidity:
      id: room_humidity
      name: "$name Room Humidity"
    update_interval: 10s
    model: dht22
  - platform: template
    id: oled_contrast
  - platform: rotary_encoder
    id: encoder
    pin_a:
      number: GPIO14
      #mode: INPUT_PULLUP
    pin_b:
      number: GPIO15
      #mode: INPUT_PULLUP
    on_clockwise:
      - if:
          condition:
            switch.is_on: brightness
          then:
            - sensor.template.publish:
                id: oled_contrast
                state: !lambda "return id(oled_contrast).state + 0.02;"
            - lambda: |-
                id(oled1).set_contrast( id(oled_contrast).state );
          else:
            - if:
                condition:
                  switch.is_on: heat_cool
                then:
                  - climate.control:
                      id: this_thermostat
                      target_temperature: !lambda "return id(this_thermostat).target_temperature + 1.0;"
    on_anticlockwise:
      then:
        - if:
            condition:
              switch.is_on: brightness
            then:
              - sensor.template.publish:
                  id: oled_contrast
                  state: !lambda "return id(oled_contrast).state - 0.02;"
              - lambda: |-
                  id(oled1).set_contrast( id(oled_contrast).state);
            else:
              - if:
                  condition:
                    switch.is_on: heat_cool
                  then:
                    - climate.control:
                        id: this_thermostat
                        target_temperature: !lambda "return id(this_thermostat).target_temperature - 1.0;"

# Sensors set up # Update GPIO number with the relevant pin for your board
switch:
  - platform: template
    id: brightness
    optimistic: true
    internal: true
  - platform: template
    id: heat_cool
    optimistic: true
    internal: true
  - platform: gpio
    pin: GPIO021
    name: "Fan Speed 1"
    id: speed1
    interlock: [speed2, speed3]
    internal: true
    interlock_wait_time: 1s
  - platform: gpio
    pin: GPIO19
    name: "Fan Speed 2"
    id: speed2
    interlock: [speed1, speed3]
    internal: true
    interlock_wait_time: 1s
  - platform: gpio
    pin: GPIO18
    name: "Fan Speed 3"
    id: speed3
    interlock: [speed1, speed2]
    internal: true
    interlock_wait_time: 1s

# Sensors set up # Update GPIO number with the relevant pin for your board
binary_sensor:
  - platform: template
    id: fire
  - platform: template
    id: cool
  - platform: gpio
    id: button
    pin:
      number: GPIO12
      inverted: true
    on_press:
      then:
        - switch.turn_on: heat_cool
        - climate.control:
            id: this_thermostat
            mode: cool
    on_click:
      - min_length: 1000ms
        max_length: 50000ms
        then:
          - switch.turn_off: heat_cool
          - climate.control:
              id: this_thermostat
              mode: "off"
    on_double_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - switch.toggle: brightness

# Output set up to create a variable fan speed out of 3 or 4 relays
output:
  - platform: template
    id: custom_output
    type: float 
    write_action:
      - if:
          condition:
            lambda: return ((state == 0));
          then:
            - switch.turn_off: speed1
            - switch.turn_off: speed2
            - switch.turn_off: speed3
      - if:
          condition:
            lambda: return ((state > 0) && (state < 0.4));
          then:
            - delay: 500ms
            - switch.turn_on: speed1
      - if:
          condition:
            lambda: return ((state > 0.4) && (state < 0.7));
          then:
            - delay: 500ms
            - switch.turn_on: speed2
      - if:
          condition:
            lambda: return ((state > 0.9));
          then:
            - delay: 500ms
            - switch.turn_on: speed3

# Fan set up to provide an interaction function
fan:
  - platform: speed
    id: fan_control
    icon: mdi:fan
    output: custom_output
    name: "$name"
    speed_count: 3
    internal: true

# Climate set up. This is the function that integrates into Home Assistant
climate:
  - platform: thermostat
    name: "$name Thermostat"
    id: this_thermostat
    visual:
      min_temperature: 8
      max_temperature: 24
      temperature_step: 1 째C
    sensor: room_temperature
    min_cooling_off_time: 1s
    min_cooling_run_time: 1s
    min_idle_time: 1s
    cool_action:
      - fan.turn_on: fan_control
      - lambda: id(cool).publish_state(true);
    idle_action:
      - fan.turn_off: fan_control
      - lambda: id(cool).publish_state(false);
      - lambda: id(fire).publish_state(false);
    on_state:
      - if:
          condition:
            lambda: return (id(this_thermostat).current_temperature > id(this_thermostat).target_temperature +8) && (id(this_thermostat).mode != 0);
          then:
            - fan.turn_on:
                id: fan_control
                speed: 3
      - if:
          condition:
            lambda: return (id(this_thermostat).current_temperature > id(this_thermostat).target_temperature +4) && (id(this_thermostat).current_temperature < id(this_thermostat).target_temperature +7) && (id(this_thermostat).mode != 0);
          then:
            - fan.turn_on:
                id: fan_control
                speed: 2
      - if:
          condition:
            lambda: return (id(this_thermostat).current_temperature > id(this_thermostat).target_temperature +1) && (id(this_thermostat).current_temperature < id(this_thermostat).target_temperature +3) && (id(this_thermostat).mode != 0);
          then:
            - fan.turn_on:
                id: fan_control
                speed: 1
